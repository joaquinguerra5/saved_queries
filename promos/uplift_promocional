/*Incidencia en ordenes de productos cuando estuvieron en promo vs cuando no estuvieron, por dÃ¬a de la semmana*/


WITH prods AS (
  SELECT
    dvps.snapshot_date,
    EXTRACT(DAYOFWEEK FROM dvps.snapshot_date) as dayofweek,
    dvps.remote_vendor_id as partner_id,
    dvps.remote_product_id as product_id,
    dvps.sku,
    dvps.product_name
  FROM
    `peya-bi-tools-pro.il_qcommerce.dim_vendor_product_snapshot` dvps
  INNER JOIN
    `peya-food-and-groceries.automated_tables_reports.partners_aaa_snapshot` aaa
  ON
    aaa.partner_id = dvps.remote_vendor_id AND dvps.snapshot_date = aaa.snapshot_date
  WHERE
    dvps.snapshot_date >= DATE_SUB(CURRENT_DATE(),INTERVAL 3 MONTH)
  AND
    product_is_active
),

  orders AS  
(
  SELECT   
    DISTINCT
    fo.registered_date,
    fo.restaurant.id as partner_id,
    d.product.product_id,
    COUNT(DISTINCT fo.order_id) OVER(partition by d.product.product_id, fo.registered_date, fo.restaurant.id) as orders_product,
    COUNT(DISTINCT fo.order_id) OVER(partition by fo.registered_date, fo.restaurant.id) as orders_partner,
  FROM
    `peya-bi-tools-pro.il_core.fact_orders` fo, UNNEST(details) d
  INNER JOIN
    `peya-food-and-groceries.automated_tables_reports.partners_aaa_snapshot` aaa
  ON
    aaa.partner_id = fo.restaurant.id AND fo.registered_date = aaa.snapshot_date
  WHERE
    order_status = 'CONFIRMED'
  AND
    fo.registered_date >= DATE_SUB(CURRENT_DATE(),INTERVAL 3 MONTH)

),


summary AS 
(SELECT
  p.*,
  orders.* EXCEPT(registered_date,partner_id,product_id),
  CASE
    WHEN promos.snapshot_date is not null THEN TRUE
    ELSE FALSE
  END as in_promo,
  item_discount_percentage,
FROM
  prods p
LEFT JOIN
  orders 
ON
  orders.registered_date = p.snapshot_date AND orders.partner_id = p.partner_id AND orders.product_id = p.product_id
LEFT JOIN
  (SELECT snapshot_date,partner_id,remote_product_id,product_is_active, AVG(item_discount_percentage) as item_discount_percentage FROM `peya-food-and-groceries.automated_tables_reports.AAA_pivot_promos` GROUP BY ALL) promos
ON
  promos.partner_id = orders.partner_id AND orders.product_id = promos.remote_product_id AND promos.snapshot_date = orders.registered_date
)

SELECT
  dayofweek,
  partner_id,
  product_id,
  sku,
  product_name,
  AVG(item_discount_percentage) as avg_discount_percentage, 
  SUM(CASE WHEN in_promo THEN COALESCE(orders_product,0) END) as orders_product_in_promo,
  SUM(CASE WHEN in_promo THEN COALESCE(orders_partner,0) END) as orders_partner_in_promo,
  SAFE_DIVIDE(SUM(CASE WHEN in_promo THEN COALESCE(orders_product,0) END),SUM(CASE WHEN in_promo THEN COALESCE(orders_partner,0) END)) as order_incidence_in_promo,
  SUM(CASE WHEN not in_promo THEN COALESCE(orders_product,0) END) as orders_product_not_promo,
  SUM(CASE WHEN not in_promo THEN COALESCE(orders_partner,0) END) as orders_partner_not_promo,
  SAFE_DIVIDE(SUM(CASE WHEN not in_promo THEN COALESCE(orders_product,0) END),SUM(CASE WHEN not in_promo THEN COALESCE(orders_partner,0) END)) as order_incidence_not_promo,
  SAFE_DIVIDE(SAFE_DIVIDE(SUM(CASE WHEN in_promo THEN COALESCE(orders_product,0) END),SUM(CASE WHEN in_promo THEN COALESCE(orders_partner,0) END)),SAFE_DIVIDE(SUM(CASE WHEN not in_promo THEN COALESCE(orders_product,0) END),SUM(CASE WHEN not in_promo THEN COALESCE(orders_partner,0) END))) - 1 as uplift
FROM
  summary
--WHERE
  --partner_id = 329470
GROUP BY
  ALL
HAVING
  orders_partner_in_promo > 0 AND orders_partner_not_promo > 0